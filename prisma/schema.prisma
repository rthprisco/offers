generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(150)
  senha     String   @db.VarChar(255)
  criado_em DateTime @default(now())

  accounts Account[]
  lists    List[]
  Review   Review[]
  Feedback Feedback[]
  Favorite Favorite[]
}

model Mercado {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  senha    String
  cnpj     String?  @unique
  criadoEm DateTime @default(now())
  ofertas  Oferta[]
}

model Oferta {
  id                   Int      @id @default(autoincrement())
  nomeProduto          String
  descricao            String?
  precoOriginal        Float
  precoPromocional     Float
  categoria            String
  dataInicio           DateTime
  dataFim              DateTime
  quantidadeDisponivel Int      @default(0)
  imagemUrl            String?
  mercadoId            Int
  criadoEm             DateTime @default(now())

  mercado Mercado @relation(fields: [mercadoId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model List {
  id     String     @id @default(cuid())
  userId Int
  user   Usuario    @relation(fields: [userId], references: [id])
  items  ListItem[]
}

model ListItem {
  id        String  @id @default(cuid())
  itemName  String
  isChecked Boolean @default(false)
  ListId    String
  List      List    @relation(fields: [ListId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  oldPrice    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews      Review[]
  feedbacks    Feedback[]
  favorites    Favorite[]
  priceHistory PriceHistory[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  rating    Int
  createdAt DateTime @default(now())

  userId Int
  user   Usuario @relation(fields: [userId], references: [id])

  product Product @relation(fields: [productId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  productId String
  comment   String
  createdAt DateTime @default(now())

  userId Int
  user   Usuario @relation(fields: [userId], references: [id])

  product Product @relation(fields: [productId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  productId String
  userId    Int
  createdAt DateTime @default(now())

  user    Usuario @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, userId])
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  price     Float
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
