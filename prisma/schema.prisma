// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  phone         String    @unique
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  List          List[]

  // Relacionamentos
  reviews   Review[]
  feedbacks Feedback[]
  favorites Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model List {
  id     String     @id @default(cuid())
  userId String
  user   User       @relation(fields: [userId], references: [id])
  items  ListItem[]
}

model ListItem {
  id        String  @id @default(cuid())
  itemName  String
  isChecked Boolean @default(false)
  ListId    String
  List      List    @relation(fields: [ListId], references: [id])
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  oldPrice      Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  reviews       Review[]
  feedbacks     Feedback[]
  favorites     Favorite[]
  priceHistory  PriceHistory[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  rating    Int
  createdAt DateTime @default(now())

  userId    String?   
  user      User?     @relation(fields: [userId], references: [id])

  product   Product   @relation(fields: [productId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  productId String
  comment   String
  createdAt DateTime @default(now())

  userId    String?
  user      User?     @relation(fields: [userId], references: [id])

  product   Product   @relation(fields: [productId], references: [id])
}

model Favorite {
  id        String   @id @default(cuid())
  productId String
  userId    String   
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, userId])
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  price     Float
  createdAt DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id])
}

