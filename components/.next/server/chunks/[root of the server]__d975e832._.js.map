{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Gabriel%20Dias/Desktop/offers-main/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\n// const prisma = globalThis.prisma || new PrismaClient();\n\n// if (process.env.NODE_ENV !== \"production\") {\n//   globalThis.prisma = prisma;\n// }\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,0DAA0D;AAE1D,+CAA+C;AAC/C,gCAAgC;AAChC,IAAI;AAEJ,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAEhB","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Gabriel%20Dias/Desktop/offers-main/app/api/save-list/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport  prisma  from \"@/lib/prisma\"; // ajuste para o caminho do seu Prisma client\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { userId, list } = await request.json();\r\n\r\n    // Verifica se já existe uma lista para o usuário\r\n    let existingList = await prisma.list.findFirst({\r\n      where: { userId },\r\n    });\r\n\r\n    // Se existir, deletamos os itens antigos\r\n    if (existingList) {\r\n      await prisma.listItem.deleteMany({\r\n        where: { ListId: existingList.id },\r\n      });\r\n    } else {\r\n      // Se não existir, criamos uma nova lista\r\n      existingList = await prisma.list.create({\r\n        data: { userId },\r\n      });\r\n    }\r\n\r\n    // Criamos os novos itens da lista\r\n    await prisma.listItem.createMany({\r\n      data: list.map((item) => ({\r\n        itemName: item.name,\r\n        isChecked: item.isPurchased,\r\n        ListId: existingList.id,\r\n      })),\r\n    });\r\n\r\n    return NextResponse.json({ ok: true });\r\n  } catch (error) {\r\n    console.error(\"Erro ao salvar lista:\", error);\r\n    return NextResponse.json({ error: \"Erro ao salvar lista\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // app/api/shopping-list/save/route.js\r\n// import { NextResponse } from \"next/server\";\r\n// import { db } from \"@/lib/db\"; // seu adaptador de banco (Prisma, etc.)\r\n\r\n// export async function POST(req) {\r\n//   const { userId, list } = await req.json();\r\n\r\n//   if (!userId) {\r\n//     return NextResponse.json({ error: \"Usuário não autenticado\" }, { status: 401 });\r\n//   }\r\n\r\n//   try {\r\n//     // Aqui você pode usar Prisma ou outro ORM\r\n//     await db.shoppingList.upsert({\r\n//       where: { userId },\r\n//       update: { items: list },\r\n//       create: { userId, items: list },\r\n//     });\r\n\r\n//     return NextResponse.json({ success: true });\r\n//   } catch (error) {\r\n//     console.error(\"Erro ao salvar lista:\", error);\r\n//     return NextResponse.json({ error: \"Erro ao salvar lista\" }, { status: 500 });\r\n//   }\r\n// }\r\n"],"names":[],"mappings":";;;AAAA;AACA,mMAAqC,6CAA6C;;;AAE3E,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE3C,iDAAiD;QACjD,IAAI,eAAe,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC7C,OAAO;gBAAE;YAAO;QAClB;QAEA,yCAAyC;QACzC,IAAI,cAAc;YAChB,MAAM,+GAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAC/B,OAAO;oBAAE,QAAQ,aAAa,EAAE;gBAAC;YACnC;QACF,OAAO;YACL,yCAAyC;YACzC,eAAe,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACtC,MAAM;oBAAE;gBAAO;YACjB;QACF;QAEA,kCAAkC;QAClC,MAAM,+GAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,MAAM,KAAK,GAAG,CAAC,CAAC,OAAS,CAAC;oBACxB,UAAU,KAAK,IAAI;oBACnB,WAAW,KAAK,WAAW;oBAC3B,QAAQ,aAAa,EAAE;gBACzB,CAAC;QACH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;QAAK;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF,EAYA,yCAAyC;CACzC,8CAA8C;CAC9C,0EAA0E;CAE1E,oCAAoC;CACpC,+CAA+C;CAE/C,mBAAmB;CACnB,uFAAuF;CACvF,MAAM;CAEN,UAAU;CACV,iDAAiD;CACjD,qCAAqC;CACrC,2BAA2B;CAC3B,iCAAiC;CACjC,yCAAyC;CACzC,UAAU;CAEV,mDAAmD;CACnD,sBAAsB;CACtB,qDAAqD;CACrD,oFAAoF;CACpF,MAAM;CACN,IAAI","debugId":null}}]
}