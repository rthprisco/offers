{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/db.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,qJAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/schemas/index.js"],"sourcesContent":["import { z } from \"zod\";\n\nexport const LoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(3),\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,cAAc,4IAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,OAAO,4IAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;IACvB,UAAU,4IAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/models/user.js"],"sourcesContent":["export const runtime = \"nodejs\";\n\nimport { db } from \"@/lib/db\";\n\nexport async function getUserByEmail(email) {\n  try {\n    const user = await db.user.findUnique({ where: { email } });\n\n    return user;\n  } catch {\n    return null;\n  }\n}\n\nexport async function getUserById(id) {\n  try {\n    const user = await db.user.findUnique({ where: { id } });\n\n    return user;\n  } catch {\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFO,MAAM,UAAU;;AAIhB,eAAe,eAAe,KAAK;IACxC,IAAI;QACF,MAAM,OAAO,MAAM,iHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAEzD,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,eAAe,YAAY,EAAE;IAClC,IAAI;QACF,MAAM,OAAO,MAAM,iHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAG;QAAE;QAEtD,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/auth.config.js"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport bcriptjs from \"bcryptjs\";\n\nimport Credentials from \"next-auth/providers/credentials\";\nimport Google from \"next-auth/providers/google\";\nimport { LoginSchema } from \"@/schemas\";\nimport { getUserByEmail } from \"@/models/user\";\n\nexport default {\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n    Credentials({\n      async authorize(credentials) {\n        const validatedFields = LoginSchema.safeParse(credentials);\n\n        if (validatedFields.success) {\n          const { email, password } = validatedFields.data;\n\n          const user = await getUserByEmail(email);\n\n          if (!user) return null;\n\n          const passwordMatch = await bcriptjs.compare(password, user.password);\n\n          if (passwordMatch) return user;\n        }\n\n        return null;\n      },\n    }),\n  ],\n};\n"],"names":[],"mappings":"AAAA,qDAAqD;;;AACrD;AAEA;AAAA;AACA;AAAA;AACA;AACA;;;;;;uCAEe;IACb,WAAW;QACT,CAAA,GAAA,6JAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,kKAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM,WAAU,WAAW;gBACzB,MAAM,kBAAkB,wHAAA,CAAA,cAAW,CAAC,SAAS,CAAC;gBAE9C,IAAI,gBAAgB,OAAO,EAAE;oBAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,gBAAgB,IAAI;oBAEhD,MAAM,OAAO,MAAM,CAAA,GAAA,sHAAA,CAAA,iBAAc,AAAD,EAAE;oBAElC,IAAI,CAAC,MAAM,OAAO;oBAElB,MAAM,gBAAgB,MAAM,yIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEpE,IAAI,eAAe,OAAO;gBAC5B;gBAEA,OAAO;YACT;QACF;KACD;AACH"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/auth.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\n\nimport { db } from \"@/lib/db\";\nimport authConfig from \"@/auth.config\";\nimport { getUserById } from \"./models/user\";\n\nexport const {\n  handlers: { GET, POST },\n  signIn,\n  signOut,\n  auth,\n} = NextAuth({\n  // providers: [\n  //   Credentials({\n  //     credentials: {\n  //       email: {},\n  //       password: {},\n  //     },\n  //     authorize: async (credentials) => {\n  //       const user = await findUserByCredentials(\n  //         credentials.email,\n  //         credentials.password,\n  //       );\n\n  //       return user;\n  //     },\n  //   }),\n  // ],\n\n  pages: {\n    signIn: \"/login\",\n  },\n  events: {\n    async linkAccount({ user }) {},\n  },\n  callbacks: {\n    // async jwt({ token, user, trigger, session }) {\n    //   if (trigger === \"update\") {\n    //     return { ...token, ...session.user };\n    //   }\n\n    //   return { ...token, ...user };\n    // },\n    // async session({ session, token }) {\n    //   session.user = token;\n    //   return session;\n    // },\n    async session({ session, token, user }) {\n      if (token.sub && session.user) {\n        session.user.id = token.sub;\n      }\n\n      if (token.role && session.user) {\n        session.user.role = token.role;\n      }\n\n      // TÁ PORCO\n      session.user.phone = token.phone;\n\n      return session;\n    },\n    async jwt({ token }) {\n      if (!token.sub) return token;\n\n      const existingUser = await getUserById(token.sub);\n\n      if (!existingUser) return token;\n\n      token.role = existingUser.role;\n      token.phone = existingUser.phone;\n\n      return token;\n    },\n  },\n  adapter: PrismaAdapter(db),\n  session: { strategy: \"jwt\" },\n  ...authConfig,\n});\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;;;;AAEO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,MAAM,EACN,OAAO,EACP,IAAI,EACL,GAAG,CAAA,GAAA,6JAAA,CAAA,UAAQ,AAAD,EAAE;IACX,eAAe;IACf,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,sBAAsB;IACtB,SAAS;IACT,0CAA0C;IAC1C,kDAAkD;IAClD,6BAA6B;IAC7B,gCAAgC;IAChC,WAAW;IAEX,qBAAqB;IACrB,SAAS;IACT,QAAQ;IACR,KAAK;IAEL,OAAO;QACL,QAAQ;IACV;IACA,QAAQ;QACN,MAAM,aAAY,EAAE,IAAI,EAAE,GAAG;IAC/B;IACA,WAAW;QACT,iDAAiD;QACjD,gCAAgC;QAChC,4CAA4C;QAC5C,MAAM;QAEN,kCAAkC;QAClC,KAAK;QACL,sCAAsC;QACtC,0BAA0B;QAC1B,oBAAoB;QACpB,KAAK;QACL,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;YACpC,IAAI,MAAM,GAAG,IAAI,QAAQ,IAAI,EAAE;gBAC7B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;YAC7B;YAEA,IAAI,MAAM,IAAI,IAAI,QAAQ,IAAI,EAAE;gBAC9B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YAEA,WAAW;YACX,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAEhC,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE;YACjB,IAAI,CAAC,MAAM,GAAG,EAAE,OAAO;YAEvB,MAAM,eAAe,MAAM,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,MAAM,GAAG;YAEhD,IAAI,CAAC,cAAc,OAAO;YAE1B,MAAM,IAAI,GAAG,aAAa,IAAI;YAC9B,MAAM,KAAK,GAAG,aAAa,KAAK;YAEhC,OAAO;QACT;IACF;IACA,SAAS,CAAA,GAAA,4JAAA,CAAA,gBAAa,AAAD,EAAE,iHAAA,CAAA,KAAE;IACzB,SAAS;QAAE,UAAU;IAAM;IAC3B,GAAG,sHAAA,CAAA,UAAU;AACf"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.js"],"sourcesContent":["import { auth } from \"@/auth\";\n\nconst protectedRoutes = [\"/my-account\", \"/create-list\"];\n\nexport default auth((req) => {\n  const { nextUrl } = req;\n\n  const isProtected = protectedRoutes.some((path) =>\n    nextUrl.pathname.startsWith(path),\n  );\n\n  if (isProtected && !req.auth) {\n    return Response.redirect(new URL(\"/login\", nextUrl));\n  }\n\n  return null;\n});\n\nexport const config = {\n  matcher: [\"/my-account\", \"/create-list\"],\n};\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;IAAC;IAAe;CAAe;uCAExC,CAAA,GAAA,4GAAA,CAAA,OAAI,AAAD,EAAE,CAAC;IACnB,MAAM,EAAE,OAAO,EAAE,GAAG;IAEpB,MAAM,cAAc,gBAAgB,IAAI,CAAC,CAAC,OACxC,QAAQ,QAAQ,CAAC,UAAU,CAAC;IAG9B,IAAI,eAAe,CAAC,IAAI,IAAI,EAAE;QAC5B,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,UAAU;IAC7C;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAe;KAAe;AAC1C"}}]
}